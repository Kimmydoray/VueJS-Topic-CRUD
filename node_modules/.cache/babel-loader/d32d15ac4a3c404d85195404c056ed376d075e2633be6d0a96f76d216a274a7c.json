{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nexport default {\n  data() {\n    return {\n      topics: JSON.parse(localStorage.getItem('topics')) || [],\n      expandedTopic: null,\n      currentPage: 1,\n      perPage: 20,\n      // Show 20 topics per page\n      newCommentText: '',\n      newCommentAuthor: ''\n    };\n  },\n  computed: {\n    sortedTopics() {\n      return [...this.topics].reverse();\n    },\n    totalPages() {\n      return Math.ceil(this.sortedTopics.length / this.perPage);\n    },\n    paginatedTopics() {\n      const start = (this.currentPage - 1) * this.perPage;\n      return this.sortedTopics.slice(start, start + this.perPage);\n    }\n  },\n  methods: {\n    deleteTopic(guid) {\n      if (confirm(\"Are you sure you want to delete this topic?\")) {\n        this.topics = this.topics.filter(topic => topic.guid !== guid);\n        this.saveTopics();\n      }\n    },\n    toggleComments(guid) {\n      this.expandedTopic = this.expandedTopic === guid ? null : guid;\n    },\n    addComment(guid) {\n      if (!this.newCommentText.trim() || !this.newCommentAuthor.trim()) {\n        alert(\"Please enter both comment and author.\");\n        return;\n      }\n      const topic = this.topics.find(topic => topic.guid === guid);\n      if (topic) {\n        topic.comments.push({\n          comment: this.newCommentText,\n          date: new Date().toISOString(),\n          by: this.newCommentAuthor\n        });\n        this.saveTopics();\n      }\n      this.newCommentText = '';\n      this.newCommentAuthor = '';\n    },\n    editComment(guid, index) {\n      const topic = this.topics.find(topic => topic.guid === guid);\n      if (topic) {\n        topic.comments[index].isEditing = true;\n        topic.comments[index].editedText = topic.comments[index].comment;\n      }\n    },\n    saveComment(guid, index) {\n      const topic = this.topics.find(topic => topic.guid === guid);\n      if (topic) {\n        topic.comments[index].comment = topic.comments[index].editedText;\n        topic.comments[index].isEditing = false;\n        this.saveTopics();\n      }\n    },\n    deleteComment(guid, index) {\n      if (confirm(\"Are you sure you want to delete this comment?\")) {\n        const topic = this.topics.find(topic => topic.guid === guid);\n        if (topic) {\n          topic.comments.splice(index, 1);\n          this.saveTopics();\n        }\n      }\n    },\n    saveTopics() {\n      localStorage.setItem('topics', JSON.stringify(this.topics));\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","topics","JSON","parse","localStorage","getItem","expandedTopic","currentPage","perPage","newCommentText","newCommentAuthor","computed","sortedTopics","reverse","totalPages","Math","ceil","length","paginatedTopics","start","slice","methods","deleteTopic","guid","confirm","filter","topic","saveTopics","toggleComments","addComment","trim","alert","find","comments","push","comment","date","Date","toISOString","by","editComment","index","isEditing","editedText","saveComment","deleteComment","splice","setItem","stringify","nextPage","prevPage"],"sources":["/Applications/MAMP/htdocs/vue-crud-app/src/components/ListTopic.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>All Topics</h2>\n    <router-link to=\"/add\">\n      <button style=\"margin-bottom: 10px;\">Add New Topic</button>\n    </router-link>\n\n    <table border=\"1\">\n      <thead>\n        <tr>\n          <th>GUID</th>\n          <th>Name</th>\n          <th>Action</th>\n        </tr>\n      </thead>\n      <tbody>\n        <template v-for=\"(item) in paginatedTopics\" :key=\"item.guid\">\n          <tr>\n            <td>{{ item.guid }}</td>\n            <td>{{ item.name }}</td>\n            <td>\n              <router-link :to=\"'/edit/' + item.guid\">Edit</router-link>\n              <button @click=\"deleteTopic(item.guid)\" style=\"background: red; color: white; margin-left: 10px;\">\n                Delete\n              </button>\n              <button @click=\"toggleComments(item.guid)\" style=\"margin-left: 10px;\">\n                {{ expandedTopic === item.guid ? 'Hide Comments' : 'View Comments' }}\n              </button>\n            </td>\n          </tr>\n          <tr v-if=\"expandedTopic === item.guid\">\n            <td colspan=\"3\">\n              <ul v-if=\"item.comments && item.comments.length\">\n                <li v-for=\"(comment, i) in item.comments\" :key=\"i\">\n                  <strong>{{ comment.by }}</strong>: \n                  <span v-if=\"!comment.isEditing\">{{ comment.comment }}</span>\n                  <input v-else v-model=\"comment.editedText\" />\n\n                  <em>({{ comment.date }})</em>\n\n                  <button v-if=\"!comment.isEditing\" @click=\"editComment(item.guid, i)\">Edit</button>\n                  <button v-else @click=\"saveComment(item.guid, i)\">Save</button>\n                  <button @click=\"deleteComment(item.guid, i)\" style=\"margin-left: 10px;\">Delete</button>\n                </li>\n              </ul>\n              <p v-else>No comments available.</p>\n\n              <!-- Add new comment -->\n              <div>\n                <input v-model=\"newCommentText\" placeholder=\"Write a comment...\" />\n                <input v-model=\"newCommentAuthor\" placeholder=\"Your name\" />\n                <button @click=\"addComment(item.guid)\">Add Comment</button>\n              </div>\n            </td>\n          </tr>\n        </template>\n      </tbody>\n    </table>\n\n    <!-- Pagination Controls -->\n    <div style=\"margin-top: 10px;\">\n      <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Previous</button>\n      <span> Page {{ currentPage }} of {{ totalPages }} </span>\n      <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Next</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      topics: JSON.parse(localStorage.getItem('topics')) || [],\n      expandedTopic: null,\n      currentPage: 1,\n      perPage: 20, // Show 20 topics per page\n      newCommentText: '',\n      newCommentAuthor: '',\n    };\n  },\n  computed: {\n    sortedTopics() {\n      return [...this.topics].reverse();\n    },\n    totalPages() {\n      return Math.ceil(this.sortedTopics.length / this.perPage);\n    },\n    paginatedTopics() {\n      const start = (this.currentPage - 1) * this.perPage;\n      return this.sortedTopics.slice(start, start + this.perPage);\n    }\n  },\n  methods: {\n    deleteTopic(guid) {\n      if (confirm(\"Are you sure you want to delete this topic?\")) {\n        this.topics = this.topics.filter(topic => topic.guid !== guid);\n        this.saveTopics();\n      }\n    },\n    toggleComments(guid) {\n      this.expandedTopic = this.expandedTopic === guid ? null : guid;\n    },\n    addComment(guid) {\n      if (!this.newCommentText.trim() || !this.newCommentAuthor.trim()) {\n        alert(\"Please enter both comment and author.\");\n        return;\n      }\n\n      const topic = this.topics.find(topic => topic.guid === guid);\n      if (topic) {\n        topic.comments.push({\n          comment: this.newCommentText,\n          date: new Date().toISOString(),\n          by: this.newCommentAuthor,\n        });\n        this.saveTopics();\n      }\n\n      this.newCommentText = '';\n      this.newCommentAuthor = '';\n    },\n    editComment(guid, index) {\n      const topic = this.topics.find(topic => topic.guid === guid);\n      if (topic) {\n        topic.comments[index].isEditing = true;\n        topic.comments[index].editedText = topic.comments[index].comment;\n      }\n    },\n    saveComment(guid, index) {\n      const topic = this.topics.find(topic => topic.guid === guid);\n      if (topic) {\n        topic.comments[index].comment = topic.comments[index].editedText;\n        topic.comments[index].isEditing = false;\n        this.saveTopics();\n      }\n    },\n    deleteComment(guid, index) {\n      if (confirm(\"Are you sure you want to delete this comment?\")) {\n        const topic = this.topics.find(topic => topic.guid === guid);\n        if (topic) {\n          topic.comments.splice(index, 1);\n          this.saveTopics();\n        }\n      }\n    },\n    saveTopics() {\n      localStorage.setItem('topics', JSON.stringify(this.topics));\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}